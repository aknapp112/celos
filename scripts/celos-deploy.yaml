---
# Playbook to perform integration testing on Celos
#
# Performs various tests against the servlets.

# ansible-playbook -i ./scripts/test/inventory scripts/celos-deploy.yaml \
# -e celos_version=12345 -e service_name=celos-server -e jar_path=../celos-server/build/libs/celos-0.1.jar

- hosts: test-server
  gather_facts: no
  vars:
    root: ".."
    prefix: "/home/{{ service_user }}/local"
    local_deploy: "{{ root }}/production/runit/local_deploy.sh"
    service_dir: "{{ prefix }}/service/{{ service_name }}"
    start_script_path: "{{ prefix }}/bin/{{ service_name}}"
    dest_jar_path: "{{ prefix }}/lib/{{ service_name}}.jar"
    main_class: com.collective.celos.server.Main
    stdout_log_path: "{{ prefix }}/log/{{ service_name }}"

  tasks:

  - ping:


  - name: "assert version non empty"
    when: service_version == ""
    fail:

#  - local_action: command ./gradlew jar
#    args:
#      chdir: "{{ root }}"

  - file: dest={{ celos_defaults_dir }} state=directory
  - file: dest={{ celos_workflows_dir }} state=directory
  - file: dest={{ celos_ui_dir }} state=directory
  - file: dest={{ celos_db_dir }} state=directory
  - file: dest={{ service_dir }} state=directory
  - file: dest={{ service_dir }}/log state=directory
  - file: state=directory dest={{ stdout_log_path }}

  - file: state=directory dest={{ prefix }}/lib
  - copy: src={{ jar_path }} dest={{ dest_jar_path }}

  - file: state=directory dest={{ prefix }}/bin
  - template: src=templates/service-start.tpl dest={{ start_script_path }} owner={{ service_user }} mode=0755

  - template: src=templates/run.tpl dest="{{ service_dir }}/run" owner={{ service_user }} mode=0755
  - template: src=templates/check.tpl dest="{{ service_dir }}/check" owner={{ service_user }} mode=0755
  - template: src=templates/log-run.tpl dest="{{ service_dir }}/log/run" owner={{ service_user }} mode=0755

  - file: state=directory dest={{ service_dir }}/supervise mode=0755
  - shell: "[ -p {{ service_dir }}/supervise/ok ]      || mkfifo {{ service_dir }}/supervise/ok"
  - shell: "[ -p {{ service_dir }}/supervise/control ] || mkfifo {{ service_dir }}/supervise/control"

  - file: state=directory dest={{ service_dir }}/log/supervise mode=0755
  - shell: "[ -p {{ service_dir }}/log/supervise/ok ]      || mkfifo {{ service_dir }}/log/supervise/ok"
  - shell: "[ -p {{ service_dir }}/log/supervise/control ] || mkfifo {{ service_dir }}/log/supervise/control"

  - script: "{{ local_deploy }} --SERVICE_NAME {{ service_name }} --SERVICE_DIR {{ service_dir }}"

  - register: result
    local_action:
      module: uri
      url: "http://{{inventory_hostname}}:{{service_port}}/version"
      return_content: yes
  - name: Check servlet /version correctness
    when: result.content != service_version
    fail:
