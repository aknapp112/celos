Celos: A Scriptable Scheduler for Periodical Hadoop Workflows
=============================================================
:toc: macro
:toclevels: 3
:toc-title:

toc::[]

== Introduction

Celos is a tool for running recurring workflows that process data in
Hadoop, such as MapReduce programs or Hive SQL scripts.

image::etc/images/celos-ui.png[Celos UI]

The above screenshot shows the Celos UI.  Each row represents a
workflow.  The tiles are called slots and are individual executions of
a workflow for a particular point in time.  Most workflows in the
screenshot are hourly, and some are daily.  Green slots have already
run.  Slots in `wait` are still waiting for their preconditions (such
as data availability in HDFS) to be met.  `rdy` are ready to run, and
will be scheduled in one of the next scheduler steps.  `run` slots are
currently running.  `time` slots have timed out after waiting too long
for their preconditions to be met.  `fail` slots have failed, and have
no more retries left, so they need to be manually rerun, if desired.

Celos workflows are defined with JavaScript.  An example is here:
link:samples/quickstart/src/main/celos/workflow.js[].  On each
scheduler step (which is usually triggered once a minute from cron),
Celos evaluates all workflow JavaScript files, and then schedules the
workflows they define.  Celos keeps a database recording the state of
each slot as small JSON file.

Celos works as frontend to link:https://oozie.apache.org/[Apache
Oozie], which is the actual execution engine for workflows.  Oozie
provides a small XML-based DSL for describing the actions a workflow
should perform (example:
link:samples/quickstart/src/main/oozie/workflow.xml[]), and
distributes the jobs across the cluster.

== Prerequisites

* JDK 1.8
* link:https://hadoop.apache.org/[Apache Hadoop] 2.5.0
* link:https://oozie.apache.org/[Apache Oozie] 4.1.0

You can probably get away with slightly older Hadoop and Oozie
versions.

== Getting Started

Head over to link:samples/quickstart[*samples/quickstart*].

== JavaScript API Reference
=== General
==== celos.defineWorkflow

===== Description

This is the main API call that registers a new workflow.  Any number
of `celos.defineWorkflow` calls may appear in a file.  See
link:samples/quickstart/src/main/celos/workflow.js[] for a file that
defines two workflows.

===== Syntax

[source,javascript]
....
celos.defineWorkflow(options)
....

===== Parameters

`celos.defineWorkflow` takes as argument an options object with the
following fields:

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|The identifier string for the workflow, must be unique.
|`trigger`|link:#triggers[Trigger]|Yes|The trigger that determines data availability for the workflow.
|`schedule`|link:#schedules[Schedule]|Yes|The schedule that determines the points in time at which the workflow should run.
|`schedulingStrategy`|link:#scheduling-strategies[SchedulingStrategy]|Yes|The scheduling strategy that determines when and in which order ready slots should be run.
|`externalService`|link:#external-services[ExternalService]|Yes|The external service actually responsible for executing the job.
|`startTime`|String|No|The date when the workflow should start executing (default: "1970-01-01T00:00Z").
|`maxRetryCount`|Number|No|The number of times a slot of this workflow should be automatically retried if it fails (default: 0).
|`waitTimeoutSeconds`|Number|No|The number of seconds a workflow should stay waiting until it times out (default: `Integer.MAX_VALUE` (68 years)).
|===

===== Examples

[source,javascript]
....
celos.defineWorkflow({
    "id": "my-workflow",
    "schedule": celos.hourlySchedule(),
    "schedulingStrategy": celos.serialSchedulingStrategy(),
    "trigger": celos.alwaysTrigger(),
    "externalService": celos.oozieExternalService({
        "oozie.wf.application.path": "/my-workflow/workflow.xml",
        "param1": "Hello",
        "param2": "World"
    }),
    "maxRetryCount": 3
});
....

==== celos.importDefaults

===== Description

Evaluates a file from the defaults directory in the current scope, so
all variables and functions from the file become available in the
current file.

===== Syntax

[source,javascript]
....
celos.importDefaults(name)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`name`|String|Yes|The name of the defaults file to import, without the ".js" suffix.
|===

===== Examples

[source,javascript]
....
// Loads the file foo.js from the defaults directory
celos.importDefaults("foo");
....

=== Triggers

==== celos.hdfsCheckTrigger

===== Description

Makes a workflow wait for a file or directory in HDFS.  Often used to
wait for _READY or _SUCCESS files.

===== Syntax

[source,javascript]
....
celos.hdfsCheckTrigger(path, fs?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`path`|String|Yes|The HDFS path to wait for.  May include the variables `${year}`, `${month}`, `${day}`, `${hour}`, `${minute}`, and `${second}`, which will be replaced by the zero-padded values from the slot's scheduled time.
|`fs`|String|No|The `hdfs://` URI of the HDFS filesystem to use.  If not specified, the value of the CELOS_DEFAULT_HDFS variable will be used.
|===

===== Examples

[source,javascript]
....
celos.hdfsCheckTrigger("/logs/${year}-${month}-${day}/${hour}-00/_READY");
....

==== celos.successTrigger

===== Description

Makes a workflow wait for the success of another workflow at the same
time.  This is used to define dependencies among workflows.

===== Syntax

[source,javascript]
....
celos.successTrigger(workflowID)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`workflowID`|String|Yes|The ID of the other workflow to wait for.
|===

===== Examples

[source,javascript]
....
// A workflow using this trigger will run at time T only after the
// workflow "bar" has succeeded at time T.
celos.successTrigger("bar");
....

==== celos.andTrigger

===== Description

Logical AND of nested triggers.

===== Syntax

[source,javascript]
....
celos.andTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo and /bar
celos.andTrigger(celos.hdfsCheckTrigger("/foo"),
                 celos.hdfsCheckTrigger("/bar"));
....

==== celos.orTrigger

===== Description

Logical OR of nested triggers.

===== Syntax

[source,javascript]
....
celos.orTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo or /bar
celos.orTrigger(celos.hdfsCheckTrigger("/foo"),
                celos.hdfsCheckTrigger("/bar"));
....

==== celos.notTrigger

===== Description

Logical NOT of a nested trigger.

===== Syntax

[source,javascript]
....
celos.notTrigger(trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to negate.
|===

===== Examples

[source,javascript]
....
// Wait until HDFS path /foo doesn't exist.
celos.notTrigger(celos.hdfsCheckTrigger("/foo"));
....

==== celos.offsetTrigger

===== Description

Offset a nested trigger into the future or past.

===== Syntax

[source,javascript]
....
celos.offsetTrigger(seconds, trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to offset into the future (if positive) or past (if negative).
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to offset.
|===

===== Examples

[source,javascript]
....
// Wait for this hour's and next hour's HDFS file.
var trigger = celos.hdfsCheckTrigger("${year}-${month}-${day}/${hour}-00/_READY");
celos.andTrigger(trigger,
                 celos.offsetTrigger(60 * 60, trigger);
....

==== celos.delayTrigger

===== Description

Waits until a specified amount of time has passed between the slot's
scheduled time and the current wallclock time.

===== Syntax

[source,javascript]
....
celos.delayTrigger(seconds)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to wait.
|===

===== Examples

[source,javascript]
....
// Will become ready one hour after its scheduled time.
celos.delayTrigger(60 * 60);

// Can also be used for e.g. alerting: will trigger if, after 1 hour,
// workflow "foo" is not successful.
celos.andTrigger(celos.delayTrigger(60 * 60),
                 celos.notTrigger(celos.successTrigger("foo")));
....

==== celos.alwaysTrigger

===== Description

A trigger that's always ready, to be used when a workflow has no
preconditions and should simply run at any scheduled time.

===== Syntax

[source,javascript]
....
celos.alwaysTrigger()
....

===== Examples

[source,javascript]
....
celos.alwaysTrigger();
....

=== Schedules


==== celos.cronSchedule
==== celos.hourlySchedule
==== celos.minutelySchedule
==== celos.dependentSchedule
=== Scheduling Strategies
==== celos.serialSchedulingStrategy
=== External Services
==== celos.oozieExternalService
=== Variables
==== CELOS_DEFAULT_HDFS
==== CELOS_DEFAULT_OOZIE
==== CELOS_DEFAULT_OOZIE_PROPERTIES

== Command Reference
=== celos-server.jar

The celos-server.jar launches Celos.

==== Server command-line arguments

===== --port

This required argument sets the HTTP port under which the server will run.

===== --workflows

This optional argument sets the workflows directory from which Celos
reads workflow JavaScript files.

If unsupplied, defaults to /etc/celos/workflows.

===== --defaults

This optional argument sets the defaults directory which contains
defaults JavaScript files that can be imported by workflows.

If unsupplied, defaults to /etc/celos/defaults.

===== --logs

This optional argument sets the directory which contains the log
files.

If unsupplied, defaults to /var/log/celos.

===== --db

This optional argument sets the directory which contains Celos' state
database.

If unsupplied, defaults to /var/lib/celos.

===== --autoSchedule

This optional argument sets the interval (in seconds) after which
Celos should automatically start a scheduler step.

In unsupplied, Celos will not automatically schedule, and wait for
POSTs to the /scheduler servlet instead.

==== Server servlets

===== /scheduler

POSTing to this servlet initiates a scheduler step.

In production we do this once a minute from cron.

===== /workflow-list

GETting this servlet returns the list of workflows loaded into Celos.

===== /workflow-slots

GETting this servlet returns information about a workflow and a subset
of its slots.

===== /rerun

POSTing to this servlet instructs Celos to mark a slot for rerun.

=== celos-ci.jar
==== CI command-line arguments
===== --mode
===== --deployDir
===== --hdfsRoot
===== --target
==== CI environment variables
===== CELOS_CI_USERNAME
==== Target files
=== celos-ui.jar
==== UI command-line arguments
===== --port
===== --celos
===== --hue
==== UI servlets
===== /ui
