Celos: A Scriptable Scheduler for Periodical Hadoop Workflows
=============================================================
:toc: macro
:toclevels: 3
:toc-title:

toc::[]

== Introduction

Celos is a tool for running recurring workflows that process data in
Hadoop, such as MapReduce programs or Hive SQL scripts.

image::etc/images/celos-ui.png[Celos UI]

The above screenshot shows the Celos UI.  Each row represents a
workflow.  The tiles are called slots and are individual executions of
a workflow for a particular point in time.  Most workflows in the
screenshot are hourly, and some are daily.  Green slots have already
run.  Slots in `wait` are still waiting for their preconditions (such
as data availability in HDFS) to be met.  `rdy` are ready to run, and
will be scheduled in one of the next scheduler steps.  `run` slots are
currently running.  `time` slots have timed out after waiting too long
for their preconditions to be met.  `fail` slots have failed, and have
no more retries left, so they need to be manually rerun, if desired.

Celos workflows are defined with JavaScript.  An example is here:
link:samples/quickstart/src/main/celos/workflow.js[].  On each
scheduler step (which is usually triggered once a minute from cron),
Celos evaluates all workflow JavaScript files, and then schedules the
workflows they define.  Celos keeps a database recording the state of
each slot as small JSON file.

Celos works as frontend to link:https://oozie.apache.org/[Apache
Oozie], which is the actual execution engine for workflows.  Oozie
provides a small XML-based DSL for describing the actions a workflow
should perform (example:
link:samples/quickstart/src/main/oozie/workflow.xml[]), and
distributes the jobs across the cluster.

== Prerequisites

* JDK 1.8
* link:https://hadoop.apache.org/[Apache Hadoop] 2.5.0
* link:https://oozie.apache.org/[Apache Oozie] 4.1.0

You can probably get away with slightly older Hadoop and Oozie
versions.

== Getting Started

Head over to link:samples/quickstart[*samples/quickstart*].

== JavaScript API Reference
=== General
==== celos.defineWorkflow

===== Description

This is the main API call that registers a new workflow.

===== Syntax

[source,javascript]
....
celos.defineWorkflow(options)
....

===== Parameters

The `options` argument is an object with the following fields:

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|The identifier string for the workflow, must be unique.
|`trigger`|link:#triggers[Trigger]|Yes|The trigger that determines data availability for the workflow.
|`schedule`|link:#schedules[Schedule]|Yes|The schedule that determines the points in time at which the workflow should run.
|`schedulingStrategy`|link:#scheduling-strategies[SchedulingStrategy]|Yes|The scheduling strategy that determines when and in which order ready slots should be run.
|`externalService`|link:#external-services[ExternalService]|Yes|The external service actually responsible for executing the job.
|`startTime`|String|No|The date when the workflow should start executing (default: "1970-01-01T00:00Z").
|`maxRetryCount`|Number|No|The number of times a slot of this workflow should be automatically retried if it fails (default: 0).
|`waitTimeoutSeconds`|Number|No|The number of seconds a workflow should stay waiting until it times out (default: `Integer.MAX_VALUE` (68 years)).
|===

===== Examples

[source,javascript]
....
celos.defineWorkflow({
    "id": "my-workflow",
    "schedule": celos.hourlySchedule(),
    "schedulingStrategy": celos.serialSchedulingStrategy(),
    "trigger": celos.alwaysTrigger(),
    "externalService": celos.oozieExternalService({
        "oozie.wf.application.path": "/my-workflow/workflow.xml",
        "param1": "Hello",
        "param2": "World"
    }),
    "maxRetryCount": 3
});
....

==== celos.importDefaults

===== Description

Evaluates a file from the defaults directory in the current scope, so
all variables and functions from the file become available in the
current file.

===== Syntax

[source,javascript]
....
celos.importDefaults(name)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`name`|String|Yes|The name of the defaults file to import, without the ".js" suffix.
|===

===== Examples

[source,javascript]
....
// Loads the file foo.js from the defaults directory
celos.importDefaults("foo");
....

=== Triggers

A trigger determines (for each point in time at which a workflow runs)
whether the preconditions for running the workflow (such as data
availability, or success of upstream workflows are met).

==== celos.hdfsCheckTrigger

===== Description

Makes a workflow wait for a file or directory in HDFS.  Often used to
wait for _READY or _SUCCESS files.

===== Syntax

[source,javascript]
....
celos.hdfsCheckTrigger(path, fs?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`path`|String|Yes|The HDFS path to wait for.  May include the variables `${year}`, `${month}`, `${day}`, `${hour}`, `${minute}`, and `${second}`, which will be replaced by the zero-padded values from the slot's scheduled time.
|`fs`|String|No|The `hdfs://` URI of the HDFS filesystem to use.  If not specified, the value of the CELOS_DEFAULT_HDFS variable will be used.
|===

===== Examples

[source,javascript]
....
celos.hdfsCheckTrigger("/logs/${year}-${month}-${day}/${hour}-00/_READY");
....

==== celos.successTrigger

===== Description

Makes a workflow wait for the success of another workflow at the same
time.  This is used to define dependencies among workflows.

===== Syntax

[source,javascript]
....
celos.successTrigger(workflowID)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`workflowID`|String|Yes|The ID of the other workflow to wait for.
|===

===== Examples

[source,javascript]
....
// A workflow using this trigger will run at time T only after the
// workflow "bar" has succeeded at time T.
celos.successTrigger("bar");
....

==== celos.andTrigger

===== Description

Logical AND of nested triggers.

===== Syntax

[source,javascript]
....
celos.andTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo and /bar
celos.andTrigger(celos.hdfsCheckTrigger("/foo"),
                 celos.hdfsCheckTrigger("/bar"));
....

==== celos.orTrigger

===== Description

Logical OR of nested triggers.

===== Syntax

[source,javascript]
....
celos.orTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo or /bar
celos.orTrigger(celos.hdfsCheckTrigger("/foo"),
                celos.hdfsCheckTrigger("/bar"));
....

==== celos.notTrigger

===== Description

Logical NOT of a nested trigger.

===== Syntax

[source,javascript]
....
celos.notTrigger(trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to negate.
|===

===== Examples

[source,javascript]
....
// Wait until HDFS path /foo doesn't exist.
celos.notTrigger(celos.hdfsCheckTrigger("/foo"));
....

==== celos.offsetTrigger

===== Description

Offset a nested trigger into the future or past.

===== Syntax

[source,javascript]
....
celos.offsetTrigger(seconds, trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to offset into the future (if positive) or past (if negative).
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to offset.
|===

===== Examples

[source,javascript]
....
// Wait for this hour's and next hour's HDFS file.
var trigger = celos.hdfsCheckTrigger("/${year}-${month}-${day}/${hour}-00/_READY");
celos.andTrigger(trigger,
                 celos.offsetTrigger(60 * 60, trigger);
....

==== celos.delayTrigger

===== Description

Waits until a specified amount of time has passed between the slot's
scheduled time and the current wallclock time.

===== Syntax

[source,javascript]
....
celos.delayTrigger(seconds)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to wait.
|===

===== Examples

[source,javascript]
....
// Will become ready one hour after its scheduled time.
celos.delayTrigger(60 * 60);

// Can also be used for e.g. alerting: will trigger if, after 1 hour,
// workflow "foo" is not successful.
celos.andTrigger(celos.delayTrigger(60 * 60),
                 celos.notTrigger(celos.successTrigger("foo")));
....

==== celos.alwaysTrigger

===== Description

A trigger that's always ready, to be used when a workflow has no
preconditions and should simply run at any scheduled time.

===== Syntax

[source,javascript]
....
celos.alwaysTrigger()
....

===== Examples

[source,javascript]
....
celos.alwaysTrigger();
....

=== Schedules

A schedule determines the points in time (slots) at which a workflow should run.

==== celos.cronSchedule

===== Description

A cron-like schedule.

The full cron syntax is described here:
http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger

===== Syntax

[source,javascript]
....
celos.cronSchedule(cronExpr)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`cronExpr`|String|Yes|The link:http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger[cron expression].
|===

===== Examples

[source,javascript]
....
// Runs a workflow at 10:15am every day.
celos.cronSchedule("0 15 10 * * ?");
....

==== celos.hourlySchedule

===== Description

Runs a workflow every hour.

A shortcut for `celos.cronSchedule("0 0 * * * ?")`.

===== Syntax

[source,javascript]
....
celos.hourlySchedule()
....

===== Examples

[source,javascript]
....
celos.hourlySchedule();
....

==== celos.minutelySchedule

===== Description

Runs a workflow every minute.

A shortcut for `celos.cronSchedule("0 * * * * ?")`.

===== Syntax

[source,javascript]
....
celos.minutelySchedule()
....

===== Examples

[source,javascript]
....
celos.minutelySchedule();
....

==== celos.dependentSchedule

===== Description

Runs a workflow with the same schedule as another workflow.

===== Syntax

[source,javascript]
....
celos.dependentSchedule(workflowID)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`workflowID`|String|Yes|The workflow ID of the other workflow.
|===

===== Examples

[source,javascript]
....
// A workflow using this schedule will run with the same schedule as 
// the workflow with the ID "foo".
celos.dependentSchedule("foo");
....

=== Scheduling Strategies

A scheduling strategy determines the order in which the ready slots of
a workflow are executed.

==== celos.serialSchedulingStrategy

===== Description

Executes slots oldest first, with a configurable concurrency level.

===== Syntax

[source,javascript]
....
celos.serialSchedulingStrategy(concurrency?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`concurrency`|Number|No|The number of slots to execute at the same time (defaults to 1).
|===

===== Examples

[source,javascript]
....
// A workflow using this scheduling strategy will have 
// at most three slots executing concurrently.
celos.serialSchedulingStrategy(3);
....

=== External Services

An external service actually executes a workflow.

==== celos.oozieExternalService

===== Description

Executes slots with Oozie.

===== Syntax

[source,javascript]
....
celos.oozieExternalService(properties, oozieURL?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`properties`|Object|Yes|Properties to pass to Oozie.
|`oozieURL`|String|No|The HTTP URL of the Oozie API.  If not specified, the value of the <<CELOS_DEFAULT_OOZIE>> variable will be used.
|===

Inside property values, the variables `${year}`, `${month}`, `${day}`,
`${hour}`, `${minute}`, and `${second}`, will be replaced by the
zero-padded values from the slot's scheduled time.

`year`, `month`, `day`, `hour`, `minute`, and `second` will also be
set as Oozie properties, so they can be used in the workflow.xml.

Additionally, Celos will set the Oozie property `celosWorkflowName` to
a string like "my-workflow@2015-09-12T20:00Z", useful for display.

===== Examples

[source,javascript]
....
celos.oozieExternalService({
    "prop1": "Hello. It is the year ${year}!",
    "prop2": "Just another property."
});
....

=== Variables

If defined, these global variables influence some API functions.

==== CELOS_DEFAULT_HDFS

The String value of this variable will be used as the default HDFS
name node URI by <<celos.hdfsCheckTrigger>>.

==== CELOS_DEFAULT_OOZIE

The String value of this variable will be used as the default Oozie
API URL by <<celos.oozieExternalService>>.

==== CELOS_DEFAULT_OOZIE_PROPERTIES

The members of this Object will be added to the Oozie properties of a
workflow by <<celos.oozieExternalService>>.

== Celos Server Reference

The celos-server.jar launches Celos.

=== Server Command-Line Arguments

[options="header"]
|===
|Name|Type|Required|Description
|`--port`|Integer|Yes|HTTP port for server.
|`--workflows`|Path|No|Workflows directory (defaults to /etc/celos/workflows).
|`--defaults`|Path|No|Defaults directory (defaults to /etc/celos/defaults).
|`--logs`|Path|No|Logs directory (defaults to /var/log/celos).
|`--db`|Path|No|State database directory (defaults to /var/lib/celos/db).
|`--autoSchedule`|Integer|No|Interval (in seconds) between which scheduler steps.  In unsupplied, Celos will not automatically step the scheduler, and wait for POSTs to the /scheduler servlet instead.
|===

=== Server HTTP API

==== /scheduler

Doing a POST to this servlet initiates a scheduler step.

In production we do this once a minute from cron.

===== Example

....
curl -X POST localhost:1234/scheduler
....

==== /workflow-list

Doing a GET to this servlet returns the list of workflows loaded into Celos.

===== Example

....
curl "localhost:1234/workflow-list"
....

prints:

....
{
  "ids" : [ "workflow-1", "workflow-2", "workflow-3" ]
}
....

==== /workflow-slots

Doing a GET to this servlet returns the slots of a workflow within a
time range.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|ID of the workflow.
|`end`|String (ISO 8601)|No|Time (exclusive) of most recent slot to return.  Defaults to current time.
|`start`|String (ISO 8601)|No|Time (inclusive) of earliest slot to return.  Defaults to 1 week before `end`.
|===

===== Example

....
curl "localhost:1234/workflow-slots?id=workflow-1"
....

prints:

....
{
  "slots" : [ {
    "time" : "2015-09-13T13:50:00.000Z",
    "status" : "READY",
    "externalID" : null,
    "retryCount" : 0
  }, {
    "time" : "2015-09-13T13:45:00.000Z",
    "status" : "SUCCESS",
    "externalID" : "0004806-150911205802478-oozie-oozi-W",
    "retryCount" : 0
  }, {
    "time" : "2015-09-13T13:40:00.000Z",
    "status" : "SUCCESS",
    "externalID" : "0004804-150911205802478-oozie-oozi-W",
    "retryCount" : 0
  },
  ...
  ]
}
....

==== /rerun

Doing a POST to this servlet instructs Celos to mark a slot for rerun.

The slot's state will be reset to waiting and its retry count will be
reset to 0.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|ID of the workflow.
|`time`|String (ISO 8601)|Yes|Scheduled time of slot to rerun.
|===

===== Example

....
curl -X POST "localhost:1234/rerun?id=workflow-1&time=2015-09-13T13:40Z"
....

== Celos CI Reference

The celos-ci.jar can be used to deploy workflow, defaults, and HDFS
artefacts automatically.

=== CI Command-Line Arguments

[options="header"]
|===
|Name|Type|Required|Description
|`--mode`|String|Yes|`deploy` or `undeploy`
|`--workflowName`|String|Yes|Name of workflow (or rather, project).
|`--deployDir`|Path|Yes|The <<deployment directory>> (not needed for `undeploy`).
|`--target`|Path|Yes|The <<target file>>.
|`--hdfsRoot`|Path|No|HDFS data will be placed under this root (defaults to /user/celos/app).
|===

=== Deployment directory

A deployment directory must follow a canonical directory layout:

....
workflow.js
defaults.js
hdfs/
  workflow.xml
  ...
  lib/
    ...
....

=== Target file

A target file describes a Celos and HDFS setup:

....
{
    "hadoop.hdfs-site.xml": "sftp://celos002.ewr004.collective-media.net/etc/hadoop/conf/hdfs-site.xml",
    "hadoop.core-site.xml": "sftp://celos002.ewr004.collective-media.net/etc/hadoop/conf/core-site.xml",
    "defaults.dir.uri": "sftp://celos002.ewr004.collective-media.net/etc/celos/defaults",
    "workflows.dir.uri": "sftp://celos002.ewr004.collective-media.net/etc/celos/workflows",
}
....

== Celos UI Reference
=== UI Command-Line Arguments
[options="header"]
|===
|Name|Type|Required|Description
|`--port`|Integer|Yes|HTTP port for UI.
|`--celos`|URL|Yes|Celos URL.
|`--hue`|Path|No|URL of Oozie UI.
|`--config`|Path|No|JSON config file.
|===

=== UI HTTP API

==== /ui

Doing a GET to this servlet displays the Celos UI.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`time`|String (ISO 8601)|Yes|Time of most recent slot to display.
|`zoom`|String (ISO 8601)|No|Zoom level in minutes (defaults to 60).
|===
