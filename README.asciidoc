Celos: A Scriptable Scheduler for Periodical Hadoop Workflows
=============================================================
:toc: macro
:toclevels: 3
:toc-title:

toc::[]

== Introduction

Celos is a tool for running recurring workflows that process data in
Hadoop, such as MapReduce programs or Hive SQL scripts.

image::etc/images/celos-ui.png[Celos UI]

=== Oozie

To explain how Celos works and what it does we first have to talk
about link:https://oozie.apache.org/[Apache Oozie], because Celos
works as a frontend to it.

Oozie is a job execution engine for Hadoop.  You package your code
into a JAR, upload it to HDFS, and then fill out a small
workflow.xml file that tells Oozie how to run it.

image::etc/images/oozie.png[Oozie workflow directory]

In the simplest case, as in the diagram above, you simply invoke a
Java main class, that then e.g. sets up a MapReduce process.  Oozie
workflow.xml files support
link:https://oozie.apache.org/docs/4.2.0/WorkflowFunctionalSpec.html[many
additional kinds of actions], e.g. sending an email, manipulating
files in HDFS, or loading data into JDBC databases.  Workflow.xml
files can also launch multiple actions in series or contain `if`-like
decision nodes.  This is mostly out of scope for this document, but in
general, Celos workflows can use all features of Oozie.

Oozie fetches your workflow.xml file and related artefacts (from the
lib directory), executes the workflow on the Hadoop cluster, and
provides a GUI, called Hue.

Oozie workflows can receive parameters (${inputPath} and {$outputPath}
in the diagram).

You can view all currently running jobs in Hue:

image::etc/images/hue-index.png[Hue index]

And you can also view details about a particular job:

image::etc/images/hue-details.png[Hue details]

=== Celos Concepts

While Oozie is good at running individual jobs, its support for
configuring recurring, periodical jobs is a major PITA.  So, after
throwing our hands into the air one too many times, we decided to
write an alternative scheduler frontend to Oozie.  Thus Celos was
born.

(If you know Oozie, Celos replaces Oozie's coordinator mechanism,
while keeping its workflow mechanism.)

Suppose we have the Oozie workflow to run at /wordcount in HDFS, and
hourly input data in /input/YYYY-MM-DD/HH00, and want to write output
data to /output/YYYY-MM-DD/HH00, we can set up a simple Celos workflow
with the ID "wordcount" like this:

[source,javascript]
....
celos.defineWorkflow({
    "id": "wordcount",
    "schedule": celos.hourlySchedule(),
    "schedulingStrategy": celos.serialSchedulingStrategy(),
    "trigger": celos.hdfsCheckTrigger("/input/${year}-${month}-${day}/${hour}00/_READY"),
    "externalService": celos.oozieExternalService({
        "oozie.wf.application.path": "/wordcount/workflow.xml",
        "inputPath": "/input/${year}-${month}-${day}/${hour}00/",
        "outputPath": "/output/${year}-${month}-${day}/${hour}00/",
    })
});
....

If we receive data from two datacenters, in /input/nyc and /input/lax
we can define a helper function, and quickly define two workflows,
with the IDs "wordcount-nyc" and "wordcount-lax":

[source,javascript]
....
function defineWordCountWorkflow(dc) {
    celos.defineWorkflow({
        "id": "wordcount-" + dc,
        "schedule": celos.hourlySchedule(),
        "schedulingStrategy": celos.serialSchedulingStrategy(),
        "trigger": celos.hdfsCheckTrigger("/input/" + dc + "/${year}-${month}-${day}/${hour}00/_READY"),
        "externalService": celos.oozieExternalService({
            "oozie.wf.application.path": "/wordcount/workflow.xml",
            "inputPath": "/input/" + dc + "/${year}-${month}-${day}/${hour}00/",
            "outputPath": "/output/" + dc + "/${year}-${month}-${day}/${hour}00/",
        })
    });
}
defineWordCountWorkflow("nyc");
defineWordCountWorkflow("lax");
....

A Celos workflow consists of a number of configurable parts:

* The workflow's *schedule* determines the points in time (called *slots*) at which the workflow should run, and is expressed with a `cron`-like syntax.

* For each slot, the workflow's *trigger* determines whether the slot is ready to run.  For example, it can check for the existence of a file in HDFS, or the success of another workflow.  Triggers can also be combined with AND, OR, and NOT.  We'll see examples shortly.

* The workflow's *scheduling strategy* determines when and in which order the ready slots of the workflow should be executed.

image::etc/images/slots.png[Celos concepts]

Celos workflows are defined with JavaScript, and there are expressions
for creating schedules, triggers, and scheduling strategies.

Here are two examples of schedules:

[source,javascript]
....
// A workflow using this schedule will run every hour
var hourlySchedule = celos.cronSchedule("0 0 * * * ?");
// A workflow using this schedule will run every day
var dailySchedule = celos.cronSchedule("0 0 0 * * ?");
....

Triggers form a kind of DSL:

[source,javascript]
....
// A workflow using this trigger will wait for a file /foo in HDFS
var simpleTrigger = celos.hdfsCheckTrigger("/foo");

// A workflow using this trigger will wait for a file of the form /logs/YYYY-MM-DD/HH-00/_READY in HDFS
var logsReadyTrigger = celos.hdfsCheckTrigger("/logs/${year}-${month}-${day}/${hour}-00/_READY");

// We can combine triggers with AND, so the workflow will wait for both:
var multipleFilesReadyTrigger = celos.andTrigger(simpleTrigger, logsReadyTrigger);

// We can wait for the success of another workflow:  A workflow using this trigger will wait until foo becomes succesful
var fooTrigger = celos.successTrigger("foo");

// A workflow using this trigger will run if workflow foo is not successful after one hour:
var alertTrigger = celos.andTrigger(celos.delayTrigger(60 * 60),
                                    celos.notTrigger(fooTrigger));

// A workflow using this trigger will wait for this hour's and the next hour's logs
var twoHoursTrigger = celos.andTrigger(logsReadyTrigger,
                                       celos.offsetTrigger(60 * 60, logsReadyTrigger));
....

There's only one scheduling strategy at the moment,
celos.serialSchedulingStrategy, which executes slots oldest first,
with a configurable concurrency level.

[source,javascript]
....
// A workflow using this scheduling strategy will execute three slots in parallel:
var strat = celos.serialSchedulingStrategy(3);
....

=== How it works

Celos requires four directories to run:

==== Workflows Directory

The workflows directory contains JavaScript files that define workflows.

It may look like this:

....
workflows/
  wordcount.js
  some-other-workflow.js
  yet-another-workflow.js
....

==== Defaults Directory

The defaults directory contains JavaScript files that can be imported
from workflow files with <<celos.importDefaults>>.

It may look like this:

....
defaults/
  production-settings.js
  some-cool-variables.js
....

==== Logs Directory

The logs directory contains the file celos.log and older daily log
files into which Celos writes informative and error output.

It may look like this:

....
logs/
  celos.log
  celos-2015-09-15.log
....

==== Database Directory

The database directory contains the state of each slot as a small JSON
file.

....
db/
  state/
    wordcount-lax/
      2015-09-15/
        00:00:00.000Z
        01:00:00.000Z
        02:00:00.000Z
        ...
    wordcount-nyc/
      2015-09-15/
        00:00:00.000Z
        01:00:00.000Z
        02:00:00.000Z
        ...
....

An individual slot file in the state database,
e.g. db/state/wordcount-lax/2015-09-15/01:00:00.000Z looks like this:

....
{
  "status": "SUCCESS",
  "externalID": "0008681-150911205802478-oozie-oozi-W",
  "retryCount": 0
}
....

The `status` field records the state of the state machine (below) the
slot is in.

If the slot is running, successful, or failed, the `externalID` field
contains the Oozie ID of the corresponding Oozie workflow execution
(otherwise `externalID` is null).

The `retryCount` records how many times the slot has already been
retried after failure.

==== Scheduler Step

On each scheduler step (typically triggered once per minute from
cron), Celos evaluates all JavaScript files in the <<workflows
directory>>, yielding a set of uniquely identified workflows.

Then, for each workflow, it will fetch all slot files within a sliding
window of 7 days before the current date.

Each slot is a state machine with the following states:

image::etc/images/states.png[Slot states]

Celos will take the following action, depending on the state of the
slot:

[options="header"]
|===
|State|Action
|WAITING|Call the workflow's trigger to determine whether the slot is now ready.
|READY|Pass the slot as a candidate for scheduling to the workflow's scheduling strategy.
|RUNNING|Ask Oozie for the status of the execution.
|SUCCESS|Do nothing.
|FAILURE|Do nothing.
|WAIT_TIMEOUT|Do nothing.
|===

==== Rerunning slots outside the sliding window

The state database contains additional information about slots that
have been manually <<rerun>>.

In this example, the slots 2015-08-01T01:00Z and 2015-08-01T02:00Z of
the workflow wordcount-nyc have been rerun.  They are outside the
sliding window, so the above scheduling algorithm would not look at
the slots.

However, rerunning a slot touches an additional file in db/rerun, and
slots for which such a file exists are fed into the scheduling
algorithm in addition to the slots from the 7 day sliding window.

....
db/
  state/
    ... as above ...
  rerun/
    wordcount-nyc/
      2015-08-01/
        01:00:00.000Z
        02:00:00.000Z
....

== Building & Running Celos

=== Prerequisites

* JDK 1.8
* link:https://hadoop.apache.org/[Apache Hadoop] 2.5.0
* link:https://oozie.apache.org/[Apache Oozie] 4.1.0

You can probably get away with slightly older Hadoop and Oozie
versions.

=== Building Celos

....
scripts/build.sh
....

This will build the following JARs:

* celos-server/build/libs/celos-server.jar (see <<Celos Server Reference>>)
* celos-ci/build/libs/celos-ci-fat.jar (see <<Celos CI Reference>>)
* celos-ui/build/libs/celos-ui.jar (see <<Celos UI Reference>>)

== Getting Started

Head over to link:samples/quickstart[*samples/quickstart*].

== JavaScript API Reference

=== General

==== celos.defineWorkflow

===== Description

This is the main API call that registers a new workflow.

===== Syntax

[source,javascript]
....
celos.defineWorkflow(options)
....

===== Parameters

The `options` argument is an object with the following fields:

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|The identifier string for the workflow, must be unique.
|`trigger`|link:#triggers[Trigger]|Yes|The trigger that determines data availability for the workflow.
|`schedule`|link:#schedules[Schedule]|Yes|The schedule that determines the points in time at which the workflow should run.
|`schedulingStrategy`|link:#scheduling-strategies[SchedulingStrategy]|Yes|The scheduling strategy that determines when and in which order ready slots should be run.
|`externalService`|link:#external-services[ExternalService]|Yes|The external service actually responsible for executing the job.
|`startTime`|String|No|The date when the workflow should start executing (default: "1970-01-01T00:00Z").
|`maxRetryCount`|Number|No|The number of times a slot of this workflow should be automatically retried if it fails (default: 0).
|`waitTimeoutSeconds`|Number|No|The number of seconds a workflow should stay waiting until it times out (default: `Integer.MAX_VALUE` (68 years)).
|===

===== Examples

[source,javascript]
....
celos.defineWorkflow({
    "id": "my-workflow",
    "schedule": celos.hourlySchedule(),
    "schedulingStrategy": celos.serialSchedulingStrategy(),
    "trigger": celos.alwaysTrigger(),
    "externalService": celos.oozieExternalService({
        "oozie.wf.application.path": "/my-workflow/workflow.xml",
        "param1": "Hello",
        "param2": "World"
    })
});
....

==== celos.importDefaults

===== Description

Evaluates a file from the defaults directory in the current scope, so
all variables and functions from the file become available in the
current file.

===== Syntax

[source,javascript]
....
celos.importDefaults(name)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`name`|String|Yes|The name of the defaults file to import, without the ".js" suffix.
|===

===== Examples

[source,javascript]
....
// Loads the file foo.js from the defaults directory
celos.importDefaults("foo");
....

=== Triggers

A trigger determines (for each point in time at which a workflow runs)
whether the preconditions for running the workflow (such as data
availability, or success of upstream workflows are met).

==== celos.hdfsCheckTrigger

===== Description

Makes a workflow wait for a file or directory in HDFS.  Often used to
wait for _READY or _SUCCESS files.

===== Syntax

[source,javascript]
....
celos.hdfsCheckTrigger(path, fs?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`path`|String|Yes|The HDFS path to wait for.  May include the variables `${year}`, `${month}`, `${day}`, `${hour}`, `${minute}`, and `${second}`, which will be replaced by the zero-padded values from the slot's scheduled time.
|`fs`|String|No|The `hdfs://` URI of the HDFS filesystem to use.  If not specified, the value of the CELOS_DEFAULT_HDFS variable will be used.
|===

===== Examples

[source,javascript]
....
celos.hdfsCheckTrigger("/logs/${year}-${month}-${day}/${hour}-00/_READY");
....

==== celos.successTrigger

===== Description

Makes a workflow wait for the success of another workflow at the same
time.  This is used to define dependencies among workflows.

===== Syntax

[source,javascript]
....
celos.successTrigger(workflowID)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`workflowID`|String|Yes|The ID of the other workflow to wait for.
|===

===== Examples

[source,javascript]
....
// A workflow using this trigger will run at time T only after the
// workflow "bar" has succeeded at time T.
celos.successTrigger("bar");
....

==== celos.andTrigger

===== Description

Logical AND of nested triggers.

===== Syntax

[source,javascript]
....
celos.andTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo and /bar
celos.andTrigger(celos.hdfsCheckTrigger("/foo"),
                 celos.hdfsCheckTrigger("/bar"));
....

==== celos.orTrigger

===== Description

Logical OR of nested triggers.

===== Syntax

[source,javascript]
....
celos.orTrigger(trigger1, ..., triggerN)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger1, ..., triggerN`|link:#triggers[Trigger]|No|The nested triggers.
|===

===== Examples

[source,javascript]
....
// Wait for the HDFS paths /foo or /bar
celos.orTrigger(celos.hdfsCheckTrigger("/foo"),
                celos.hdfsCheckTrigger("/bar"));
....

==== celos.notTrigger

===== Description

Logical NOT of a nested trigger.

===== Syntax

[source,javascript]
....
celos.notTrigger(trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to negate.
|===

===== Examples

[source,javascript]
....
// Wait until HDFS path /foo doesn't exist.
celos.notTrigger(celos.hdfsCheckTrigger("/foo"));
....

==== celos.offsetTrigger

===== Description

Offset a nested trigger into the future or past.

===== Syntax

[source,javascript]
....
celos.offsetTrigger(seconds, trigger)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to offset into the future (if positive) or past (if negative).
|`trigger`|link:#triggers[Trigger]|Yes|The nested trigger to offset.
|===

===== Examples

[source,javascript]
....
// Wait for this hour's and next hour's HDFS file.
var trigger = celos.hdfsCheckTrigger("/${year}-${month}-${day}/${hour}-00/_READY");
celos.andTrigger(trigger,
                 celos.offsetTrigger(60 * 60, trigger);
....

==== celos.delayTrigger

===== Description

Waits until a specified amount of time has passed between the slot's
scheduled time and the current wallclock time.

===== Syntax

[source,javascript]
....
celos.delayTrigger(seconds)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`seconds`|Number|Yes|The number of seconds to wait.
|===

===== Examples

[source,javascript]
....
// Will become ready one hour after its scheduled time.
celos.delayTrigger(60 * 60);

// Can also be used for e.g. alerting: will trigger if, after 1 hour,
// workflow "foo" is not successful.
celos.andTrigger(celos.delayTrigger(60 * 60),
                 celos.notTrigger(celos.successTrigger("foo")));
....

==== celos.alwaysTrigger

===== Description

A trigger that's always ready, to be used when a workflow has no
preconditions and should simply run at any scheduled time.

===== Syntax

[source,javascript]
....
celos.alwaysTrigger()
....

===== Examples

[source,javascript]
....
celos.alwaysTrigger();
....

=== Schedules

A schedule determines the points in time (slots) at which a workflow should run.

==== celos.cronSchedule

===== Description

A cron-like schedule.

The full cron syntax is described here:
http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger

===== Syntax

[source,javascript]
....
celos.cronSchedule(cronExpr)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`cronExpr`|String|Yes|The link:http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger[cron expression].
|===

===== Examples

[source,javascript]
....
// Runs a workflow at 10:15am every day.
celos.cronSchedule("0 15 10 * * ?");
....

==== celos.hourlySchedule

===== Description

Runs a workflow every hour.

A shortcut for `celos.cronSchedule("0 0 * * * ?")`.

===== Syntax

[source,javascript]
....
celos.hourlySchedule()
....

===== Examples

[source,javascript]
....
celos.hourlySchedule();
....

==== celos.minutelySchedule

===== Description

Runs a workflow every minute.

A shortcut for `celos.cronSchedule("0 * * * * ?")`.

===== Syntax

[source,javascript]
....
celos.minutelySchedule()
....

===== Examples

[source,javascript]
....
celos.minutelySchedule();
....

==== celos.dependentSchedule

===== Description

Runs a workflow with the same schedule as another workflow.

===== Syntax

[source,javascript]
....
celos.dependentSchedule(workflowID)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`workflowID`|String|Yes|The workflow ID of the other workflow.
|===

===== Examples

[source,javascript]
....
// A workflow using this schedule will run with the same schedule as 
// the workflow with the ID "foo".
celos.dependentSchedule("foo");
....

=== Scheduling Strategies

A scheduling strategy determines the order in which the ready slots of
a workflow are executed.

==== celos.serialSchedulingStrategy

===== Description

Executes slots oldest first, with a configurable concurrency level.

===== Syntax

[source,javascript]
....
celos.serialSchedulingStrategy(concurrency?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`concurrency`|Number|No|The number of slots to execute at the same time (defaults to 1).
|===

===== Examples

[source,javascript]
....
// A workflow using this scheduling strategy will have 
// at most three slots executing concurrently.
celos.serialSchedulingStrategy(3);
....

=== External Services

An external service actually executes a workflow.

==== celos.oozieExternalService

===== Description

Executes slots with Oozie.

===== Syntax

[source,javascript]
....
celos.oozieExternalService(properties, oozieURL?)
....

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`properties`|Object|Yes|Properties to pass to Oozie.
|`oozieURL`|String|No|The HTTP URL of the Oozie API.  If not specified, the value of the <<CELOS_DEFAULT_OOZIE>> variable will be used.
|===

Inside property values, the variables `${year}`, `${month}`, `${day}`,
`${hour}`, `${minute}`, and `${second}`, will be replaced by the
zero-padded values from the slot's scheduled time.

`year`, `month`, `day`, `hour`, `minute`, and `second` will also be
set as Oozie properties, so they can be used in the workflow.xml.

Additionally, Celos will set the Oozie property `celosWorkflowName` to
a string like "my-workflow@2015-09-12T20:00Z", useful for display.

===== Examples

[source,javascript]
....
celos.oozieExternalService({
    "prop1": "Hello. It is the year ${year}!",
    "prop2": "Just another property."
});
....

=== Variables

If defined, these global variables influence some API functions.

==== CELOS_DEFAULT_HDFS

The String value of this variable will be used as the default HDFS
name node URI by <<celos.hdfsCheckTrigger>>.

==== CELOS_DEFAULT_OOZIE

The String value of this variable will be used as the default Oozie
API URL by <<celos.oozieExternalService>>.

==== CELOS_DEFAULT_OOZIE_PROPERTIES

The members of this Object will be added to the Oozie properties of a
workflow by <<celos.oozieExternalService>>.

== Celos Server Reference

The celos-server.jar launches Celos.

The celos-server.jar must be run in the following way, due to the need
to put the Hadoop configuration on the classpath:

....
java -cp celos-server.jar:/etc/hadoop/conf com.collective.celos.server.Main <arguments...>
....

=== Server Command-Line Arguments

[options="header"]
|===
|Name|Type|Required|Description
|`--port`|Integer|Yes|HTTP port for server.
|`--workflows`|Path|No|Workflows directory (defaults to /etc/celos/workflows).
|`--defaults`|Path|No|Defaults directory (defaults to /etc/celos/defaults).
|`--logs`|Path|No|Logs directory (defaults to /var/log/celos).
|`--db`|Path|No|State database directory (defaults to /var/lib/celos/db).
|`--autoSchedule`|Integer|No|Interval (in seconds) between which scheduler steps.  In unsupplied, Celos will not automatically step the scheduler, and wait for POSTs to the /scheduler servlet instead.
|===

=== Server HTTP API

==== /scheduler

Doing a POST to this servlet initiates a scheduler step.

In production we do this once a minute from cron.

===== Example

....
curl -X POST localhost:1234/scheduler
....

==== /workflow-list

Doing a GET to this servlet returns the list of workflows loaded into Celos.

===== Example

....
curl "localhost:1234/workflow-list"
....

prints:

....
{
  "ids" : [ "workflow-1", "workflow-2", "workflow-3" ]
}
....

==== /workflow-slots

Doing a GET to this servlet returns the slots of a workflow within a
time range.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|ID of the workflow.
|`end`|String (ISO 8601)|No|Time (exclusive) of most recent slot to return.  Defaults to current time.
|`start`|String (ISO 8601)|No|Time (inclusive) of earliest slot to return.  Defaults to 1 week before `end`.
|===

===== Example

....
curl "localhost:1234/workflow-slots?id=workflow-1"
....

prints:

....
{
  "slots" : [ {
    "time" : "2015-09-13T13:50:00.000Z",
    "status" : "READY",
    "externalID" : null,
    "retryCount" : 0
  }, {
    "time" : "2015-09-13T13:45:00.000Z",
    "status" : "SUCCESS",
    "externalID" : "0004806-150911205802478-oozie-oozi-W",
    "retryCount" : 0
  }, {
    "time" : "2015-09-13T13:40:00.000Z",
    "status" : "SUCCESS",
    "externalID" : "0004804-150911205802478-oozie-oozi-W",
    "retryCount" : 0
  },
  ...
  ]
}
....

==== /trigger-status

Doing a GET to this servlet returns human-readable information about
why a slot is waiting.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|ID of the workflow.
|`time`|String (ISO 8601)|Yes|Scheduled time of slot to check.
|===

===== Example

....
curl "localhost:1234/trigger-status?id=workflow-1&time=2015-09-13T13:00Z"
....

prints:

....
{
  "type" : "AndTrigger",
  "ready" : false,
  "description" : "Not all nested triggers are ready",
  "subStatuses" : [ {
    "type" : "DelayTrigger",
    "ready" : false,
    "description" : "Delayed until 2015-09-14T16:00:00.000Z",
    "subStatuses" : [ ]
  }, {
    "type" : "HDFSCheckTrigger",
    "ready" : true,
    "description" : "HDFS path hdfs://nameservice1/logs/dc3/2015-09-14/1500 is ready",
    "subStatuses" : [ ]
  } ]
}
....

==== /rerun

Doing a POST to this servlet instructs Celos to mark a slot for rerun.

The slot's state will be reset to waiting and its retry count will be
reset to 0.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`id`|String|Yes|ID of the workflow.
|`time`|String (ISO 8601)|Yes|Scheduled time of slot to rerun.
|===

===== Example

....
curl -X POST "localhost:1234/rerun?id=workflow-1&time=2015-09-13T13:40Z"
....

== Celos CI Reference

The celos-ci-fat.jar can be used to deploy workflow, defaults, and
HDFS artefacts automatically.

....
java -jar celos-ci-fat.jar <arguments...>
....

=== CI Command-Line Arguments

[options="header"]
|===
|Name|Type|Required|Description
|`--mode`|String|Yes|`deploy` or `undeploy`
|`--workflowName`|String|Yes|Name of workflow (or rather, project).
|`--deployDir`|Path|Yes|The deployment directory (not needed for `undeploy`).
|`--target`|URL|Yes|The target file (file: or sftp: URL).
|`--hdfsRoot`|Path|No|HDFS data will be placed under this root (defaults to /user/celos/app).
|===

=== Deployment directory

A deployment directory must follow a canonical directory layout:

....
workflow.js
defaults.js
hdfs/
  workflow.xml
  ...
  lib/
    ...
....

=== Target file

A target file is a JSON file that describes a Celos and HDFS setup.

[options="header"]
|===
|Name|Type|Required|Description
|`hadoop.hdfs-site.xml`|String|Yes|URL of Hadoop hdfs-site.xml File
|`hadoop.core-site.xml`|String|Yes|URL of Hadoop core-site.xml File
|`defaults.dir.uri`|String|Yes|URL of Celos defaults directory.
|`workflows.dir.uri`|String|Yes|URL of Celos workflows directory.
|===

All fields can be file: or sftp: URLs.

Example:

....
{
    "hadoop.hdfs-site.xml": "sftp://celos002.ewr004.collective-media.net/etc/hadoop/conf/hdfs-site.xml",
    "hadoop.core-site.xml": "sftp://celos002.ewr004.collective-media.net/etc/hadoop/conf/core-site.xml",
    "defaults.dir.uri": "sftp://celos002.ewr004.collective-media.net/etc/celos/defaults",
    "workflows.dir.uri": "sftp://celos002.ewr004.collective-media.net/etc/celos/workflows",
}
....

== Celos UI Reference

The celos-ui.jar runs the Celos user interface.

....
java -jar celos-ui.jar <arguments...>
....

=== UI Command-Line Arguments

[options="header"]
|===
|Name|Type|Required|Description
|`--port`|Integer|Yes|HTTP port for UI.
|`--celos`|URL|Yes|Celos URL.
|`--hue`|Path|No|URL of Oozie UI.
|`--config`|Path|No|JSON config file.
|===

=== UI HTTP API

==== /ui

Doing a GET to this servlet displays the Celos UI.

===== Parameters

[options="header"]
|===
|Name|Type|Required|Description
|`time`|String (ISO 8601)|Yes|Time of most recent slot to display.
|`zoom`|String (ISO 8601)|No|Zoom level in minutes (defaults to 60).
|===
